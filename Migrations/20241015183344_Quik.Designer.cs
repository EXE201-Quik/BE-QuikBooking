// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quik_BookingApp.DAO;

#nullable disable

namespace QuikBookingApp.Migrations
{
    [DbContext(typeof(QuikDbContext))]
    [Migration("20241015183344_Quik")]
    partial class Quik
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Amenity", b =>
                {
                    b.Property<string>("AmenityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AmenityText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AmenityId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            AmenityId = "facility1",
                            AmenityText = "Air conditioner free",
                            SpaceId = "space001"
                        },
                        new
                        {
                            AmenityId = "facility2",
                            AmenityText = "Wifi's room free",
                            SpaceId = "space001"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Booking", b =>
                {
                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("Username");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = "booking001",
                            BookingDate = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            DepositAmount = 20000m,
                            EndTime = new DateTime(2024, 10, 16, 4, 33, 44, 506, DateTimeKind.Local).AddTicks(9211),
                            NumberOfPeople = 4,
                            PaymentId = new Guid("a31f3afe-6d84-4b03-88b9-23b20117ded0"),
                            RemainingAmount = 180000m,
                            SpaceId = "space001",
                            StartTime = new DateTime(2024, 10, 16, 2, 33, 44, 506, DateTimeKind.Local).AddTicks(9205),
                            Status = "Hoàn tất",
                            TotalAmount = 200000m,
                            Username = "john_doe"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Business", b =>
                {
                    b.Property<string>("BusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessId");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            BusinessId = "business001",
                            BusinessName = "Jane's Workspace",
                            Description = "A cozy working space for startups.",
                            Email = "jane.business@example.com",
                            Location = "123 Main Street",
                            Password = "hashedpassword789",
                            PhoneNumber = "123456789"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.ImageWS", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WSCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("WSImages")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("WorkingSpaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = "img_space001",
                            ImageUrl = "https://example.com/images/space001_image1.jpg",
                            SpaceId = "space001",
                            WSCode = "WS001",
                            WorkingSpaceName = "Cozy Private Office"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.OtpManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OtpManagers");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BookingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VNPayResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VNPayTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("8b776c2d-ce20-49f5-bf89-72b26596456d"),
                            Amount = 50000.0,
                            BookingId = "booking001",
                            PaymentDate = new DateTime(2024, 10, 16, 1, 33, 44, 506, DateTimeKind.Local).AddTicks(9226),
                            PaymentMethod = "Credit Card",
                            PaymentStatus = "Success",
                            PaymentUrl = "toexample@gmail.com",
                            VNPayResponseCode = "OK",
                            VNPayTransactionId = "VNPay001"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.PwdManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PwdManagers");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("Username");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = new Guid("eb5dbe9d-fa1a-43d6-9353-10ba5508be27"),
                            Comment = "Great office space, very comfortable!",
                            CreatedAt = new DateTime(2024, 10, 16, 1, 33, 44, 506, DateTimeKind.Local).AddTicks(9239),
                            Rating = 4,
                            SpaceId = "space001",
                            Username = "john_doe"
                        },
                        new
                        {
                            ReviewId = new Guid("c34afef1-e3c5-41a5-81e1-5f0a4ba1d633"),
                            Comment = "Came back here, still amazing experience!",
                            CreatedAt = new DateTime(2024, 10, 14, 1, 33, 44, 506, DateTimeKind.Local).AddTicks(9241),
                            Rating = 5,
                            SpaceId = "space001",
                            Username = "john_doe"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.TblRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TokenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "TokenId");

                    b.ToTable("TblRefreshtokens");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Tempuser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tempusers");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OTPVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "john_doe",
                            Email = "john@example.com",
                            ImageId = "img001",
                            IsActive = true,
                            IsLocked = false,
                            Name = "John Doe",
                            OTPVerified = true,
                            Password = "hashedpassword123",
                            PhoneNumber = "1234567890",
                            Role = "User",
                            Status = "Active"
                        },
                        new
                        {
                            Username = "jane_business",
                            Email = "jane@example.com",
                            ImageId = "img002",
                            IsActive = true,
                            IsLocked = false,
                            Name = "Jane Business",
                            OTPVerified = true,
                            Password = "hashedpassword456",
                            PhoneNumber = "0987654321",
                            Role = "Business",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.WorkingSpace", b =>
                {
                    b.Property<string>("SpaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpaceId");

                    b.HasIndex("BusinessId");

                    b.ToTable("WorkingSpaces");

                    b.HasData(
                        new
                        {
                            SpaceId = "space001",
                            BusinessId = "business001",
                            Capacity = 4,
                            Description = "A private office space for up to 4 people.",
                            ImageId = "img_space001",
                            Location = "123 Main Street, Room 101",
                            PricePerHour = 25000m,
                            RoomType = "Không gian văn phòng",
                            Title = "Cozy Private Office"
                        },
                        new
                        {
                            SpaceId = "space002",
                            BusinessId = "business001",
                            Capacity = 10,
                            Description = "An open workspace for freelancers and small teams.",
                            ImageId = "img_space002",
                            Location = "123 Main Street, Room 102",
                            PricePerHour = 15000m,
                            RoomType = "Không gian làm việc chung",
                            Title = "Modern Shared Workspace"
                        },
                        new
                        {
                            SpaceId = "space003",
                            BusinessId = "business001",
                            Capacity = 20,
                            Description = "A spacious conference room equipped with A/V facilities.",
                            ImageId = "img_space003",
                            Location = "123 Main Street, Room 201",
                            PricePerHour = 50000m,
                            RoomType = "Phòng họp",
                            Title = "Conference Room A"
                        },
                        new
                        {
                            SpaceId = "space004",
                            BusinessId = "business001",
                            Capacity = 8,
                            Description = "A quiet study hub with individual workstations.",
                            ImageId = "img_space004",
                            Location = "123 Main Street, Room 103",
                            PricePerHour = 10000m,
                            RoomType = "Study hub",
                            Title = "Study Hub"
                        },
                        new
                        {
                            SpaceId = "space005",
                            BusinessId = "business001",
                            Capacity = 2,
                            Description = "A premium office space with stunning views.",
                            ImageId = "img_space005",
                            Location = "123 Main Street, Room 104",
                            PricePerHour = 75000m,
                            RoomType = "Không gian văn phòng",
                            Title = "Executive Office"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Amenity", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.WorkingSpace", null)
                        .WithMany("Amenities")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Booking", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.WorkingSpace", "WorkingSpace")
                        .WithMany("Bookings")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quik_BookingApp.DAO.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkingSpace");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.ImageWS", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.WorkingSpace", "WorkingSpace")
                        .WithMany("Images")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkingSpace");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Payment", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("Quik_BookingApp.DAO.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Review", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.WorkingSpace", "WorkingSpace")
                        .WithMany("Reviews")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quik_BookingApp.DAO.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkingSpace");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.WorkingSpace", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.Business", "Business")
                        .WithMany("WorkingSpaces")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Booking", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Business", b =>
                {
                    b.Navigation("WorkingSpaces");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.WorkingSpace", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
