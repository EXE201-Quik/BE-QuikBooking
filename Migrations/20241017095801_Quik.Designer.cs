// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quik_BookingApp.DAO;

#nullable disable

namespace QuikBookingApp.Migrations
{
    [DbContext(typeof(QuikDbContext))]
    [Migration("20241017095801_Quik")]
    partial class Quik
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Amenity", b =>
                {
                    b.Property<string>("AmenityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AmenityText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AmenityId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            AmenityId = "amenity1",
                            AmenityText = "Private bathroom",
                            SpaceId = "space006"
                        },
                        new
                        {
                            AmenityId = "amenity2",
                            AmenityText = "Free beverages",
                            SpaceId = "space006"
                        },
                        new
                        {
                            AmenityId = "amenity3",
                            AmenityText = "24/7 access",
                            SpaceId = "space007"
                        },
                        new
                        {
                            AmenityId = "amenity4",
                            AmenityText = "Free parking",
                            SpaceId = "space008"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Booking", b =>
                {
                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("Username");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = "booking002",
                            BookingDate = new DateTime(2024, 10, 16, 16, 58, 1, 680, DateTimeKind.Local).AddTicks(8928),
                            DepositAmount = 30000m,
                            EndTime = new DateTime(2024, 10, 17, 20, 58, 1, 680, DateTimeKind.Local).AddTicks(8950),
                            NumberOfPeople = 2,
                            PaymentId = new Guid("24f99844-dbb8-4ab1-877f-c214b43ec456"),
                            RemainingAmount = 170000m,
                            SpaceId = "space006",
                            StartTime = new DateTime(2024, 10, 17, 18, 58, 1, 680, DateTimeKind.Local).AddTicks(8949),
                            Status = "Pending",
                            TotalAmount = 200000m,
                            Username = "bob_member"
                        },
                        new
                        {
                            BookingId = "booking003",
                            BookingDate = new DateTime(2024, 10, 15, 16, 58, 1, 680, DateTimeKind.Local).AddTicks(8955),
                            DepositAmount = 40000m,
                            EndTime = new DateTime(2024, 10, 17, 21, 58, 1, 680, DateTimeKind.Local).AddTicks(8957),
                            NumberOfPeople = 3,
                            PaymentId = new Guid("a9b72404-ee69-4f03-b5a5-b23deb983a9a"),
                            RemainingAmount = 210000m,
                            SpaceId = "space007",
                            StartTime = new DateTime(2024, 10, 17, 19, 58, 1, 680, DateTimeKind.Local).AddTicks(8956),
                            Status = "Confirmed",
                            TotalAmount = 250000m,
                            Username = "alice_admin"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Business", b =>
                {
                    b.Property<string>("BusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessId");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            BusinessId = "business002",
                            BusinessName = "Workspace Deluxe",
                            Description = "A deluxe workspace offering premium services.",
                            Email = "contact@workspace-deluxe.com",
                            Location = "456 Elm Street",
                            Password = "hashedpassword",
                            PhoneNumber = "987654321"
                        },
                        new
                        {
                            BusinessId = "business003",
                            BusinessName = "Startup Hub",
                            Description = "An energetic space for young startups.",
                            Email = "info@startup-hub.com",
                            Location = "789 Startup Blvd",
                            Password = "hashedpassword123",
                            PhoneNumber = "123456987"
                        },
                        new
                        {
                            BusinessId = "business004",
                            BusinessName = "Freelancers Corner",
                            Description = "A cozy spot for freelancers.",
                            Email = "freelancers@corner.com",
                            Location = "101 Freelance Road",
                            Password = "hashedpassword789",
                            PhoneNumber = "654321987"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.ImageWS", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WSCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("WSImages")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("WorkingSpaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.OtpManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OtpManagers");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BookingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VNPayResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VNPayTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("5d003ca5-8753-47c9-a3c9-e969d1457506"),
                            Amount = 30000.0,
                            BookingId = "booking002",
                            PaymentDate = new DateTime(2024, 10, 17, 16, 58, 1, 680, DateTimeKind.Local).AddTicks(9028),
                            PaymentMethod = "PayPal",
                            PaymentStatus = "Pending",
                            PaymentUrl = "payment002@example.com",
                            VNPayResponseCode = "OK",
                            VNPayTransactionId = "VNPay002"
                        },
                        new
                        {
                            PaymentId = new Guid("fd45d97e-8a68-45ad-b881-cd9b8cbbd272"),
                            Amount = 40000.0,
                            BookingId = "booking003",
                            PaymentDate = new DateTime(2024, 10, 17, 16, 58, 1, 680, DateTimeKind.Local).AddTicks(9031),
                            PaymentMethod = "Credit Card",
                            PaymentStatus = "Success",
                            PaymentUrl = "payment003@example.com",
                            VNPayResponseCode = "OK",
                            VNPayTransactionId = "VNPay003"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.PwdManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PwdManagers");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("Username");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = new Guid("43c07812-50ca-4245-8253-9edba6293b18"),
                            Comment = "Amazing experience, highly recommend!",
                            CreatedAt = new DateTime(2024, 10, 12, 16, 58, 1, 680, DateTimeKind.Local).AddTicks(9049),
                            Rating = 5f,
                            SpaceId = "space006",
                            Username = "alice_admin"
                        },
                        new
                        {
                            ReviewId = new Guid("ff20e165-361f-4f09-b67c-7148c3ab4b3a"),
                            Comment = "Great place for team collaboration!",
                            CreatedAt = new DateTime(2024, 10, 14, 16, 58, 1, 680, DateTimeKind.Local).AddTicks(9052),
                            Rating = 4f,
                            SpaceId = "space007",
                            Username = "bob_member"
                        },
                        new
                        {
                            ReviewId = new Guid("f49fcab4-1cb2-49fd-8596-57d7bfb1c06e"),
                            Comment = "Nice and quiet workspace.",
                            CreatedAt = new DateTime(2024, 10, 16, 16, 58, 1, 680, DateTimeKind.Local).AddTicks(9054),
                            Rating = 4f,
                            SpaceId = "space008",
                            Username = "charlie_business"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.TblRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TokenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "TokenId");

                    b.ToTable("TblRefreshtokens");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Tempuser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tempusers");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OTPVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "alice_admin",
                            Email = "alice.admin@example.com",
                            ImageId = "img003",
                            IsActive = true,
                            IsLocked = false,
                            Name = "Alice Admin",
                            OTPVerified = true,
                            Password = "hashedpassword789",
                            PhoneNumber = "1231231234",
                            Role = "Admin",
                            Status = "Active"
                        },
                        new
                        {
                            Username = "bob_member",
                            Email = "bob.member@example.com",
                            ImageId = "img004",
                            IsActive = true,
                            IsLocked = false,
                            Name = "Bob Member",
                            OTPVerified = true,
                            Password = "hashedpassword789",
                            PhoneNumber = "3213214321",
                            Role = "Member",
                            Status = "Active"
                        },
                        new
                        {
                            Username = "charlie_business",
                            Email = "charlie.business@example.com",
                            ImageId = "img005",
                            IsActive = true,
                            IsLocked = false,
                            Name = "Charlie Business",
                            OTPVerified = true,
                            Password = "hashedpassword789",
                            PhoneNumber = "6549871230",
                            Role = "Business",
                            Status = "Active"
                        },
                        new
                        {
                            Username = "david_user",
                            Email = "david.user@example.com",
                            ImageId = "img006",
                            IsActive = true,
                            IsLocked = false,
                            Name = "David User",
                            OTPVerified = true,
                            Password = "hashedpassword321",
                            PhoneNumber = "9876543210",
                            Role = "User",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.WorkingSpace", b =>
                {
                    b.Property<string>("SpaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpaceId");

                    b.HasIndex("BusinessId");

                    b.ToTable("WorkingSpaces");

                    b.HasData(
                        new
                        {
                            SpaceId = "space006",
                            BusinessId = "business002",
                            Capacity = 3,
                            Description = "An executive office with all luxury amenities.",
                            ImageId = "img_space006",
                            Location = "456 Elm Street, Room 101",
                            PricePerHour = 100000m,
                            RoomType = "Executive",
                            Title = "VIP Executive Office"
                        },
                        new
                        {
                            SpaceId = "space007",
                            BusinessId = "business003",
                            Capacity = 5,
                            Description = "Perfect for small teams working on innovation.",
                            ImageId = "img_space007",
                            Location = "789 Startup Blvd, Room 303",
                            PricePerHour = 20000m,
                            RoomType = "Lab",
                            Title = "Startup Lab"
                        },
                        new
                        {
                            SpaceId = "space008",
                            BusinessId = "business004",
                            Capacity = 6,
                            Description = "An open studio perfect for remote workers.",
                            ImageId = "img_space008",
                            Location = "101 Freelance Road, Room 102",
                            PricePerHour = 15000m,
                            RoomType = "Studio",
                            Title = "Freelance Studio"
                        });
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Amenity", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.WorkingSpace", null)
                        .WithMany("Amenities")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Booking", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.WorkingSpace", "WorkingSpace")
                        .WithMany("Bookings")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quik_BookingApp.DAO.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkingSpace");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.ImageWS", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.WorkingSpace", "WorkingSpace")
                        .WithMany("Images")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkingSpace");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Payment", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("Quik_BookingApp.DAO.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Review", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.WorkingSpace", "WorkingSpace")
                        .WithMany("Reviews")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quik_BookingApp.DAO.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkingSpace");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.WorkingSpace", b =>
                {
                    b.HasOne("Quik_BookingApp.DAO.Models.Business", "Business")
                        .WithMany("WorkingSpaces")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Booking", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.Business", b =>
                {
                    b.Navigation("WorkingSpaces");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Quik_BookingApp.DAO.Models.WorkingSpace", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
